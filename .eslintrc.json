{
  "env": {
    "node": true,
    "es2020": true,
    "jest": true
  },
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaVersion": 11,
    "sourceType": "module"
  },
  "plugins": [ "@typescript-eslint", "import"],
  "extends": [
    "eslint:recommended",
    "plugin:@typescript-eslint/eslint-recommended",
    "plugin:@typescript-eslint/recommended"
  ],
  "rules": {
    "one-var": ["off"],
    "indent": ["error", 2, { "SwitchCase": 1 }],
    "semi": ["error", "never"],
    "quotes": ["error", "single", { "allowTemplateLiterals": true }],
    "no-unused-expressions": ["off"],
    "no-continue": ["off"],
    "no-console": "error",
    "no-debugger": "error",
    "no-use-before-define": ["error", { "functions": false, "classes": true }],
    "no-plusplus": ["off"],
    "import/no-named-as-default": ["off"],
    "import/no-named-as-default-member": ["off"],
    "max-classes-per-file": ["off"],
    "max-len": [
      "error",
      {
        "code": 80,
        "tabWidth": 2,
        "ignoreStrings": true,
        "ignoreTemplateLiterals": true,
        "ignoreUrls": true,
        "ignoreTrailingComments": true,
        "ignorePattern": "^(import|export).*from.*$|^\\s*(it|describe|test)(\\.each\\(.*\\))?\\(.*$"
      }
    ],
    "import/order": [
      "error",
      {
        "groups": [["builtin", "external", "internal"]],
        "pathGroups": [
          {
            "pattern": "~/**",
            "group": "internal"
          },
          {
            "pattern": "@/**",
            "group": "internal"
          },
          {
            "pattern": "#/**",
            "group": "internal"
          },
          {
            "pattern": "+/**",
            "group": "internal"
          }
        ]
      }
    ],
    "no-restricted-syntax": [
      "error",
      {
        "selector": "ForInStatement",
        "message": "for..in loops iterate over the entire prototype chain, which is virtually never what you want. Use Object.{keys,values,entries}, and iterate over the resulting array."
      },
      {
        "selector": "LabeledStatement",
        "message": "Labels are a form of GOTO; using them makes code confusing and hard to maintain and understand."
      },
      {
        "selector": "WithStatement",
        "message": "`with` is disallowed in strict mode because it makes code impossible to predict and optimize."
      }
    ],
    "import/prefer-default-export": ["off"],
    "no-return-await": ["off"],
    "class-methods-use-this": ["off"],
    "camelcase": ["off"],
    "prefer-template": "error",
    "no-multi-spaces": ["error"],
    "template-curly-spacing": ["error", "never"],
    "object-curly-spacing": ["error", "always"],
    "newline-per-chained-call": ["error"],
    "newline-before-return": ["error"],
    "object-property-newline": [
      "error",
      { "allowAllPropertiesOnSameLine": true }
    ],
    "@typescript-eslint/type-annotation-spacing": [
      "error",
      { "before": false, "after": true }
    ],
    "@typescript-eslint/comma-dangle": ["error", "always-multiline"],
    "@typescript-eslint/member-delimiter-style": [
      "error",
      {
        "multiline": {
          "delimiter": "comma",
          "requireLast": true
        },
        "singleline": {
          "delimiter": "comma",
          "requireLast": false
        }
      }
    ],
    "@typescript-eslint/naming-convention": [
      "error",
      {
        "selector": "default",
        "format": ["camelCase", "PascalCase", "UPPER_CASE"]
      },
      {
        "selector": "variableLike",
        "format": ["camelCase", "UPPER_CASE"]
      },
      {
        "selector": "variable",
        "format": ["camelCase", "PascalCase", "UPPER_CASE"]
      },
      {
        "selector": "enumMember",
        "format": ["UPPER_CASE"]
      },
      {
        "selector": "typeLike",
        "format": ["PascalCase"]
      },
      {
        "selector": "classProperty",
        "format": ["camelCase"],
        "modifiers": ["private"],
        "leadingUnderscore": "require"
      },
      {
        "selector": "method",
        "format": ["camelCase"]
      },
      {
        "selector": "function",
        "format": ["camelCase", "UPPER_CASE"]
      }
    ]
  },
  "settings": {
    "import/resolver": {
      "alias": {
        "map": [
          ["~", "./src"],
          ["@", "./types"],
          ["#", "./test"],
          ["+", "./"]
        ]
      }
    }
  }
}
